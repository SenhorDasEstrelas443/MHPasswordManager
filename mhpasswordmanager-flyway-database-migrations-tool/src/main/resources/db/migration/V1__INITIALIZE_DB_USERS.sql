CREATE SCHEMA IF NOT EXISTS db_users;

DROP TABLE IF EXISTS db_users.oauth2_registered_client CASCADE;
DROP TABLE IF EXISTS db_users.oauth2_authorization_consent CASCADE;
DROP TABLE IF EXISTS db_users.oauth2_authorization CASCADE;
DROP TABLE IF EXISTS db_users.users CASCADE;
DROP TABLE IF EXISTS db_users.authorities CASCADE;
DROP TABLE IF EXISTS db_users.groups CASCADE;
DROP TABLE IF EXISTS db_users.group_authorities CASCADE;
DROP TABLE IF EXISTS db_users.group_members CASCADE;

CREATE TABLE db_users.oauth2_registered_client
(
    id                            varchar(100)                            NOT NULL,
    client_id                     varchar(100)                            NOT NULL,
    client_id_issued_at           timestamp     DEFAULT CURRENT_TIMESTAMP NOT NULL,
    client_secret                 varchar(200)  DEFAULT NULL,
    client_secret_expires_at      timestamp     DEFAULT NULL,
    client_name                   varchar(200)                            NOT NULL,
    client_authentication_methods varchar(1000)                           NOT NULL,
    authorization_grant_types     varchar(1000)                           NOT NULL,
    redirect_uris                 varchar(1000) DEFAULT NULL,
    scopes                        varchar(1000)                           NOT NULL,
    client_settings               varchar(2000)                           NOT NULL,
    token_settings                varchar(2000)                           NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE db_users.oauth2_authorization_consent
(
    registered_client_id varchar(100)  NOT NULL,
    principal_name       varchar(200)  NOT NULL,
    authorities          varchar(1000) NOT NULL,
    PRIMARY KEY (registered_client_id, principal_name)
);

CREATE TABLE db_users.oauth2_authorization
(
    id                            varchar(100) NOT NULL,
    registered_client_id          varchar(100) NOT NULL,
    principal_name                varchar(200) NOT NULL,
    authorization_grant_type      varchar(100) NOT NULL,
    authorized_scopes             varchar(1000) DEFAULT NULL,
    attributes                    text          DEFAULT NULL,
    state                         varchar(500)  DEFAULT NULL,
    authorization_code_value      text          DEFAULT NULL,
    authorization_code_issued_at  timestamp     DEFAULT NULL,
    authorization_code_expires_at timestamp     DEFAULT NULL,
    authorization_code_metadata   text          DEFAULT NULL,
    access_token_value            text          DEFAULT NULL,
    access_token_issued_at        timestamp     DEFAULT NULL,
    access_token_expires_at       timestamp     DEFAULT NULL,
    access_token_metadata         text          DEFAULT NULL,
    access_token_type             varchar(100)  DEFAULT NULL,
    access_token_scopes           varchar(1000) DEFAULT NULL,
    oidc_id_token_value           text          DEFAULT NULL,
    oidc_id_token_issued_at       timestamp     DEFAULT NULL,
    oidc_id_token_expires_at      timestamp     DEFAULT NULL,
    oidc_id_token_metadata        text          DEFAULT NULL,
    refresh_token_value           text          DEFAULT NULL,
    refresh_token_issued_at       timestamp     DEFAULT NULL,
    refresh_token_expires_at      timestamp     DEFAULT NULL,
    refresh_token_metadata        text          DEFAULT NULL,
    PRIMARY KEY (id)
);

create table db_users.users
(
    username varchar(50) NOT NULL,
    password varchar(50) NOT NULL,
    enabled  boolean     NOT NULL,
    PRIMARY KEY (username)
);

create table db_users.authorities
(
    username  varchar(50) NOT NULL,
    authority varchar(50) NOT NULL,
    CONSTRAINT fk_authorities_users FOREIGN KEY (username) REFERENCES db_users.users (username)
);
create unique index ix_auth_username on db_users.authorities (username, authority);

create table db_users.groups
(
    id         bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    group_name varchar(50) NOT NULL,
    PRIMARY KEY (id)
);

create table db_users.group_authorities
(
    group_id  bigint      NOT NULL,
    authority varchar(50) NOT NULL,
    CONSTRAINT fk_group_authorities_group FOREIGN KEY (group_id) REFERENCES db_users.groups (id)
);

create table db_users.group_members
(
    id       bigint GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    username varchar(50) NOT NULL,
    group_id bigint      NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT fk_group_members_group FOREIGN KEY (group_id) REFERENCES db_users.groups (id)
);

TRUNCATE TABLE db_users.authorities CASCADE;
TRUNCATE TABLE db_users.users CASCADE;

alter table db_users.users
    alter column password type varchar(120);

INSERT INTO db_users.users (username, "password", enabled)
VALUES ('johndoe@email.com',
        '$2a$10$6EG8N4N7jbOsY/RNPTK98eL2vft7ig7SPO/IOFd.PdnL66HgI6oDe',
        true),
       ('emmywatson@email.com',
        '$2a$10$BGG3r6z9udsLHBKLXZV0iuDvPdChNaEVoFINr.Myh0l2iEEwU.tFm',
        true),
       ('marcoshssilva.dev@gmail.com',
        '$2a$10$KkW5uV9JjrRJ13/56.5h.e.qovf4YMlxCR7FhZngm7/2m/HLDG7dO',
        true);

INSERT INTO db_users.authorities (username, authority)
VALUES ('johndoe@email.com',
        'ROLE_ADMIN'),
       ('johndoe@email.com',
        'ROLE_USER'),
       ('emmywatson@email.com',
        'ROLE_USER'),
       ('marcoshssilva.dev@gmail.com',
        'ROLE_ADMIN'),
       ('marcoshssilva.dev@gmail.com',
        'ROLE_MASTER'),
       ('marcoshssilva.dev@gmail.com',
        'ROLE_USER');

DROP TABLE IF EXISTS db_users.users_details CASCADE;

CREATE TABLE db_users.users_details
(
    username  varchar(50) NOT NULL,
    firstName varchar(36) NOT NULL,
    lastName  varchar(36) NOT NULL,
    imageUrl  varchar(255),
    PRIMARY KEY (username),
    CONSTRAINT fk_user_details_users FOREIGN KEY (username) REFERENCES db_users.users (username)
        ON DELETE RESTRICT
        ON UPDATE CASCADE
);

INSERT INTO db_users.users_details (username, firstName, lastName, imageUrl)
VALUES ('marcoshssilva.dev@gmail.com',
        'Marcos',
        'Silva',
        null),
       ('johndoe@email.com',
        'John',
        'Doe',
        null),
       ('emmywatson@email.com',
        'Emmy',
        'Watson',
        null);

INSERT INTO db_users.oauth2_registered_client (id, client_id, client_id_issued_at, client_secret,
                                               client_secret_expires_at, client_name, client_authentication_methods,
                                               authorization_grant_types, redirect_uris, scopes, client_settings,
                                               token_settings)
VALUES ('0fbef37c-443c-4084-aa68-83914e28f182', 'MHPasswordManager', '2023-01-17 05:49:34.776',
        '$2a$10$6dTcMLYP4dYKuc5qfxvomu3ZzXYTqjx.hkEEgBadlJNTlqSxwf5H.', NULL, 'Registered client for PWA Client',
        'client_secret_basic', 'refresh_token,authorization_code',
        'http://127.0.0.1:4200/authorize,http://127.0.0.1:8100/authorize,https://oidcdebugger.com/debug,https://oauth.pstmn.io/v1/callback',
        'user:canSelfRead,user:canSelfDelete,user:canSelfWrite',
        '{"@class":"java.util.Collections$UnmodifiableMap","settings.client.require-proof-key":false,"settings.client.require-authorization-consent":true}',
        '{"@class":"java.util.Collections$UnmodifiableMap","settings.token.reuse-refresh-tokens":false,"settings.token.id-token-signature-algorithm":["org.springframework.security.oauth2.jose.jws.SignatureAlgorithm","RS256"],"settings.token.access-token-time-to-live":["java.time.Duration",900.000000000],"settings.token.access-token-format":{"@class":"org.springframework.security.oauth2.server.authorization.settings.OAuth2TokenFormat","value":"self-contained"},"settings.token.refresh-token-time-to-live":["java.time.Duration",10800.000000000],"settings.token.authorization-code-time-to-live":["java.time.Duration",300.000000000]}'),
       ('082343aa-86f1-4645-8701-50bc33b210fb', 'MHPasswordManager-GlobalAdmin', '2023-01-17 05:49:34.811',
        '$2a$10$WIZDmPi06nlGlDdPTcvW3e/XVZH7CGnCfWopGOtlS9buQpg./PL1G', NULL,
        'Registered client for Client Credentials', 'client_secret_basic', 'client_credentials', '',
        'user:canDelete,user:canCreate,user:canWrite,user:canRead',
        '{"@class":"java.util.Collections$UnmodifiableMap","settings.client.require-proof-key":false,"settings.client.require-authorization-consent":false}',
        '{"@class":"java.util.Collections$UnmodifiableMap","settings.token.reuse-refresh-tokens":true,"settings.token.id-token-signature-algorithm":["org.springframework.security.oauth2.jose.jws.SignatureAlgorithm","RS256"],"settings.token.access-token-time-to-live":["java.time.Duration",180.000000000],"settings.token.access-token-format":{"@class":"org.springframework.security.oauth2.server.authorization.settings.OAuth2TokenFormat","value":"self-contained"},"settings.token.refresh-token-time-to-live":["java.time.Duration",3600.000000000],"settings.token.authorization-code-time-to-live":["java.time.Duration",300.000000000]}');
