    @Order(2)
    @Bean
    @Transactional(rollbackFor = Exception.class)
    public SecurityFilterChain initializeRegisteredClientsSecurityFilterChain(HttpSecurity http, RegisteredClientRepository registeredClientRepository, PasswordEncoder passwordEncoder) throws Exception {
        String uid1 = "92a67091-4264-4ce4-8fcb-3ec6dbfeea16";
        String uid1Pass = "fd04f93e-5e4d-4f16-98ae-9247f68d8619";

        String uid2 = "d7e4e1ce-bcc6-47ec-800f-2b6167399785";
        String uid2Pass = "8e18ee56-ab7c-4ed9-b192-ff4472e5c697";

        RegisteredClient register1 = RegisteredClient.withId(uid1)

                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
                .clientId(uid1)
                .clientName("Registered client for PWA Client")
                .clientSecret(passwordEncoder.encode(uid1Pass))

                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)

                .clientSettings(
                        ClientSettings.builder()
                                .requireAuthorizationConsent(true)
                                .requireProofKey(false)
                                .build())

                .tokenSettings(
                        TokenSettings.builder()
                                .accessTokenTimeToLive(Duration.ofMinutes(15L))
                                .reuseRefreshTokens(true)
                                .refreshTokenTimeToLive(Duration.ofHours(3L))
                                .build())

                .redirectUri("https://oidcdebugger.com/debug")
                .redirectUri("https://oauth.pstmn.io/v1/callback")
                .redirectUri("http://localhost:4200/authorize")
                .redirectUri("http://localhost:8100/authorize")

                .scope("user:canRead")
                .scope("user:canSelfWrite")
                .scope("user:canSelfDelete")

                .build();


        RegisteredClient register2 = RegisteredClient.withId(uid2)

                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
                .clientId(uid2)
                .clientName("Registered client for Client Credentials")
                .clientSecret(passwordEncoder.encode(uid2Pass))

                .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)

                .tokenSettings(
                        TokenSettings.builder()
                                .accessTokenTimeToLive(Duration.ofMinutes(3L))
                                .reuseRefreshTokens(true)
                                .refreshTokenTimeToLive(Duration.ofMinutes(15L))
                                .build())

                .scope("user:canRead")
                .scope("user:canWrite")
                .scope("user:canDelete")
                .scope("user:canCreate")

                .build();

        registeredClientRepository.save(register1);
        registeredClientRepository.save(register2);

        return http.build();
    }
