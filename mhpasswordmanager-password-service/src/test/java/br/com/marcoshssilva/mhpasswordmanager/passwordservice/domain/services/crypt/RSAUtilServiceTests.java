package br.com.marcoshssilva.mhpasswordmanager.passwordservice.domain.services.crypt;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

@AutoConfigureMockMvc
@ExtendWith(SpringExtension.class)
@SpringBootTest
@ActiveProfiles("test")
public class RSAUtilServiceTests {
    static final String encodedKeyPKCS8 =
            "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDD0RTu/rB1wVTm" +
            "niIyzabiDDQvNG+47iSUg/VT/OkQQaCi6F1SurbV1xwTtkvOzqzvyMcOGhX8JUx9" +
            "BSbB8TjjuXr+ZU/HGK9s1Fo64Pv6z+AwpQP/FIphdwJ9mN5gkUaH+1cuoPq348VC" +
            "hrZuy127FgUGTTffVW6SD8S4hGKkdUismSIG+zIiI+t3hYMgrgoII2RdyTfJg7T4" +
            "MWgA6Bc6gqYoq0+mpb6FcH8GH5qymPo0qXKdaRpCevbkB2ECIhz0+v7cB9mF0s5M" +
            "nBaQrWRAMBUC9hf3eGSQqX9QZehbHbD7o0Yy9rVQbNDwrmZmnHs42If9g1ZaMcsa" +
            "/PYt9oA9AgMBAAECggEADGA0gH5cTLTxVrn701YoC/VVfv5DaV6ztSc55BsB5+Md" +
            "8e3ZqBbg41b7EUveMq3hRC5eVkfTx+HbmbMvpeZHAC2C1n00s5Kd07UAFuSNSGbG" +
            "9owXWpHDxTEuWR3GQDguSv3ZnrrR3blpiDDXat0ziVV079cFhvnxSQ3yEu9bBKXA" +
            "mcqawX9A1tNiWjtVnCoIkpXh0ICF/VWlnx6Yplhr+K4Irw7kVRivUN8WoXmGGN00" +
            "jLoLMRiMMpuMoujbOkB44atyLXffbiq3x9Mzsw9lyxRwmL3WZATT07MjCc4HaMzb" +
            "8nF0DZmjrPKFwO3934XA6xq2o4I8F/gaMMjDp1jGAQKBgQDv3Bv01SGPoEW7AWqP" +
            "jgVlHyQyPtARSQR4feKs9L4e2Lu7nv/0Xp5WyOwhNe+DaWAx3utcOqLpTRqnLWOz" +
            "w6tTtRmilqzkeAODsGDs3OB5Xv8j63yfdet8mMBaF1AQn9iVaPRQsEDWgvYHMfn1" +
            "djFvUBdyvH96W5pJkdrKbkfYfQKBgQDQ/kZCU3jTc+LQUKuWRugilccsyC1IwE2b" +
            "29LiytSolZHtEO1HgRMfc3AAU/LOVMLFAGnpsQlbKY5XeP0KIa5XZPGQIaDdsFmd" +
            "xHfDFp9Ag1r9YT5wG/1nAjwLFSwEjSVquka5Px0hhEYKrMwAW9wfwfZ/yyi4Ybdj" +
            "UdHrdrmSwQKBgHQ2mBD6xsT46XAe0ot1SyXgfcAecN8/Gnxquc4E0qzNY8AW3HqA" +
            "8YSo2seIg2CPSL1A/ZX1DwOsiPJg6oKpljP7dc0x5djYUROX/I4mwlfr8ABuUzZL" +
            "guoedGvyCafUWrKhZGZHz1Jfp2Z7D1mfh3ogOwwrSjR1d36XvYMBBaxdAoGAKD9f" +
            "rnQ+x5IAsxdmA/nByK9JfTFLr0ABciuCUFS5YYH0aVAiMewEj8D+Z8HC98NRAvlS" +
            "bEPAxoKZO/U73dCgr4nsD1K6lRbaG0zzt2lK3/Sr+DHbAWISidzfTU8VfAbmlsgq" +
            "yJAD/ylnB7VBUCxglukWnIO2YtPGqmTeZVcm48ECgYA/QWnejc88uAwUW6GKbeJy" +
            "LVAIXe72/xC5heRMgVi3S3eGhqnKAKLr5qHDGZuCXE6eXjQXMgvUuKINomW5poSz" +
            "rPtlfJuqFxLZ8fZnkutmi34J529tBJCHR9xqh48fqv9bvyKH4n5tdcoX/eJFfydp" +
            "+5WOFhNNctSXX5EBLuXDiw==";

    static final String encodedKeyX509 =
            "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw9EU7v6wdcFU5p4iMs2m" +
            "4gw0LzRvuO4klIP1U/zpEEGgouhdUrq21dccE7ZLzs6s78jHDhoV/CVMfQUmwfE4" +
            "47l6/mVPxxivbNRaOuD7+s/gMKUD/xSKYXcCfZjeYJFGh/tXLqD6t+PFQoa2bstd" +
            "uxYFBk0331Vukg/EuIRipHVIrJkiBvsyIiPrd4WDIK4KCCNkXck3yYO0+DFoAOgX" +
            "OoKmKKtPpqW+hXB/Bh+aspj6NKlynWkaQnr25AdhAiIc9Pr+3AfZhdLOTJwWkK1k" +
            "QDAVAvYX93hkkKl/UGXoWx2w+6NGMva1UGzQ8K5mZpx7ONiH/YNWWjHLGvz2LfaA" +
            "PQIDAQAB";
    @Autowired
    RSAUtilService rsaUtilService;

    @DisplayName("Test if can generate PrivateKey instance from PKCS8 encoded key")
    @Test
    public void mustGeneratePrivateKeyFromPKCS8() {
        assertDoesNotThrow(() -> rsaUtilService.getPrivateFromPKCS8(encodedKeyPKCS8));
    }

    @DisplayName("Test if can generate PublicKey instance from an PrivateKey in PKCS8")
    @Test
    public void mustGeneratePublicKeyFromPrivateKeyPKCS8() {
        assertDoesNotThrow(() -> rsaUtilService.getPublic(rsaUtilService.getPrivateFromPKCS8(encodedKeyPKCS8)));
    }

    @DisplayName("Test if can generate PublicKey instance from an PrivateKey generated by KeyPairGenerator")
    @Test
    public void mustGeneratePublicKeyFromKeyGenerator() throws NoSuchAlgorithmException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        assertDoesNotThrow(() -> rsaUtilService.getPublic(keyPair.getPrivate()));
    }

    @DisplayName("Test if can generate PublicKey instance from an X509 encoded key")
    @Test
    public void mustGeneratePublicKeyFromX509() {
        assertDoesNotThrow(() -> rsaUtilService.getPublicFromX509(encodedKeyX509));
    }
}
